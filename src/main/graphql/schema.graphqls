"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
  "Included when true."
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
  "Skipped when true."
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @case(case: Case) on FIELD_DEFINITION

directive @auth(requiredRoles: [Role!]!) on FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
  "The reason for the deprecation"
  reason: String = "No longer supported"
) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
  "The URL that specifies the behaviour of this scalar."
  url: String!
) on SCALAR

type Book {
  "The name of the primary author"
  authorName: String!
  id: ID!
  title: String!
}

type Developer {
  firstName: String!
  id: ID!
  lastName: String!
}

type Greeting {
  first: String!
  second: String! @case(case : UPPER)
  third: String! @case(case : LOWER)
}

type Me {
  adminpowers: String @auth(requiredRoles : [ADMIN])
  roles: [Role!]!
  superpowers: String
  username: String!
}

type Mutation {
  addBook(input: BookInput!): Book
}

type Project {
  developers: [Developer!]!
  id: ID!
  name: String!
}

type Query {
  """

  Retrieve
  all
  books
  """
  books: [Book!]!
  developers: [Developer!]!
  hello(subject: String!): Greeting!
  me: Me
  projects: [Project!]!
  vehicle: Vehicle
}

type Vehicle {
  coordinates: Coordinates
  lastSeen: String
}

enum Case {
  LOWER
  UPPER
}

enum Role {
  ADMIN
  USER
}

scalar Coordinates

input BookInput {
  authorName: String!
  title: String!
}
